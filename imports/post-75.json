{
    "comments": [{
        "timestamp": 1364709600000,
        "by": "Anonymous",
        "text": "What about using $(this).attr('id') instead of\nthis.id ?",
        "title": "No subject"
    }],
    "tags": ["html", "javascript", "jquery"],
    "title": "5 Common Ways to Abuse jQuery",
    "html": "<p>jQuery is great. It is powerful and quick. But with any power\ncomes abuse. Here are some common ways to jQuery is abused.</p>\n<p> </p>\n<h2>1) Overuse of .ready()</h2>\n<p><strong>Problem:</strong> Much JavaScript should run immediately\nafter an element closing tag.</p>\n<p><strong>How bad?</strong> Better to shatter a mirror</p>\n<p><strong>Why:</strong> Users will often start using the page\nbefore it finishes loading. Google Analytics and other scripts can\ncause the DOMContentLoaded event fire long after the page appears\nto be loaded.</p>\n<p><strong>Instead do:</strong> Add a script block immediately\nafter the element! For example, if I want to focus in on the first\nelement in the form, add <span class=\"geshifilter\"><code class=\"text geshifilter-text\">document.getElementById('id').focus()</code></span>\nin a script block right after the input tag. If not, I might start\nfilling in the form; when the page finishes loading a few seconds\nlater, I'll be in for a nasty surprise--the cursor will snap back\nto the first input!</p>\n<p> </p>\n<h2>2) Using .is('.class')</h2>\n<p><strong>Problem:</strong> performance.</p>\n<p><strong>How bad?</strong> Like a Zombie</p>\n<p><strong>Why:</strong> jQuery runs through an awful lot of Sizzle\ncode instead of just checking HTMLElement#className.</p>\n<p><strong>Instead do:</strong> .hasClass('class')</p>\n<p> </p>\n<h2>3) Using .live()</h2>\n<p><strong>Problem:</strong> Terrible performance, <a href=\"http://api.jquery.com/live/#caveats\" target=\"_blank\">some features\nare not supported</a>.</p>\n<p><strong>How bad?</strong> An angel loses its wings</p>\n<p><strong>Why:</strong> jQuery attaches the listener to the\ndocument.</p>\n<p><strong>Instead do:</strong> .delegate(). It allows you attach\nthe listener to the element(s) you want to. Attaching to the\ndocument is almost always too high. I think .delegate() was added\nas a correction to .live()--.live() should have never been\nadded.</p>\n<p> </p>\n<h2>4) Repeated Calls</h2>\n<p><strong>Problem:</strong> Too many users call $(selector) every\ntime they reference the object--even one line after another.</p>\n<p><strong>How bad?</strong> Lightning to the forehead</p>\n<p><strong>Why:</strong> jQuery re-queries the document on every\ncall.</p>\n<p><strong>Instead do:</strong> If you plan to reference the object\nlater, store it in a variable!</p>\n<p> </p>\n<h2>5) Not Knowing JavaScript</h2>\n<p><strong>Problem:</strong> Some jQuery users don't know\nJavaScript. Even worse, some don't even know that jQuery\n<em>is</em> JavaScript!</p>\n<p><strong>How bad?</strong> Tomato to the face</p>\n<p><strong>Why:</strong> You do a disservice to yourself and your\nweb app if you don't know the basics of JavaScript. It's like\npulling the trigger of a gun without knowing which way the bullet\nwill come out.</p>\n<p><strong>Instead do:</strong> Learn how to do some things in\nJavaScript without jQuery. For example, experiment with\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">document.getElementById</code></span> and\nHTMLElement#style.</p>",
    "timestamp": 1289372400000,
    "slug": "5-common-ways-to-abuse-jquery",
    "nid": 75
}