{
    "comments": [{
        "timestamp": 1320994800000,
        "by": "Anonymous",
        "text": "Thanks for this post, I started writing my own\nJavaScript library using this technique. :)",
        "title": "Thanks for this post, I"
    }],
    "tags": ["javascript", "jquery", "prototype-js"],
    "title": "Element Wrappers in JavaScript",
    "html": "<p>Element wrappers are coming. We are going to see more frameworks\nusing wrappers for JavaScript DOM Elements.</p>\n<p>Sam Stephenson created the Prototype JavaScript Framework and\npioneered extending native DOM Elements. For browsers that support\nit, Prototype extends HTMLElement.prototype. But <a href=\"http://ajaxian.com/archives/prototype-2-0-will-not-extend-the-dom\" target=\"_blank\">Prototype 2.0 will not extend DOM Elements</a> any\nmore.</p>\n<p>Extending DOM Elements has many negative side effects and I\nwould say is even considered harmful. In that Ajaxian article, you\ncan find a link to Kangax's post that explains what is wrong with\nextending the DOM.</p>\n<p>So here's some ideas for Element wrappers that I've toyed around\nwith myself. I'll call the Element wrapper class <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span>.</p>\n<h3>The <span class=\"geshifilter\"><code class=\"text geshifilter-text\">$</code></span> type function</h3>\n<p>You can choose any name, but in Prototype and MooTools, the\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">$</code></span> function takes an ID or\nelement and returns an extended Element.</p>\n<ul>\n<li><span class=\"geshifilter\"><code class=\"text geshifilter-text\">$</code></span> is a shortcut for\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl.getInstance()</code></span>.</li>\n<li><span class=\"geshifilter\"><code class=\"text geshifilter-text\">$</code></span> accepts string IDs, html\nstrings, DOM Elements and <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> instances.</li>\n<li><span class=\"geshifilter\"><code class=\"text geshifilter-text\">$</code></span> should ensure that only one\nwrapper is created per Element. You can store a reference to the\nwrapper in an expando property or in a hash of <span class=\"geshifilter\"><code class=\"text geshifilter-text\">id =&amp;gt;\nWrappedEl</code></span> pairs.</li>\n</ul>\n<h3>The <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> Class</h3>\n<p>This is where the magic happens.</p>\n<ul>\n<li><span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> should provide\nfunctions to manipulate every native property or function. Some\nexamples: <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl#update()</code></span> to set\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">innerHTML</code></span>, <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl#getAttribute()</code></span> to\nprovide a cross-browser method that mirrors <span class=\"geshifilter\"><code class=\"text geshifilter-text\">HTMLElement#getAttribute()</code></span>,\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl#setProperty()</code></span> to\nset properties directly.</li>\n<li>Should provide a way to add methods. Would be nice if it\nprovides a way to add methods for a certain tag. In that case it is\nprobably best to use subclasses; e.g. <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> is a parent of\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElTextarea</code></span>. It even\nmakes sense to add new methods by default to some tags; e.g. add a\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElTextarea#value()</code></span> to\nget and set the <span class=\"geshifilter\"><code class=\"text geshifilter-text\">value</code></span> property of a\ntextarea.</li>\n<li>Should feel the same as DOM Element extension. If current\nscripts avoid using properties such as <span class=\"geshifilter\"><code class=\"text geshifilter-text\">value</code></span> and <span class=\"geshifilter\"><code class=\"text geshifilter-text\">innerHTML</code></span> the <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> could even be\ncompatible with an API that extends DOM Elements.</li>\n<li>It is nice if the <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> class provides\ngenerics. In other words the ability to call all the instance\nmethods statically by passing the element as the first\nargument.</li>\n</ul>\n<h3>Collections</h3>\n<p>Once your <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> is ready, you are\nnot many lines away from adding jQuery-like API. So you might as\nwell code it!</p>\n<ul>\n<li>Create a collection class--called, say, <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElList</code></span>.</li>\n<li>Define a method for every <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span>\nmethod.</li>\n<li>Chainable methods like setters should return the <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElList</code></span> object.</li>\n<li>Methods that return an HTML NodeList should return a\nconcatenated collection of <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> objects in an\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">Array</code></span>--or even better--in a\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElList</code></span> object.</li>\n<li>Some methods such as <span class=\"geshifilter\"><code class=\"text geshifilter-text\">getAttribute</code></span> should return\nthe result for the first <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span>in the\ncollection.</li>\n<li>The method to add methods to <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedEl</code></span> may even be smart\nenough to automatically add methods to <span class=\"geshifilter\"><code class=\"text geshifilter-text\">WrappedElList</code></span>.</li>\n<li style=\"list-style: none; display: inline\">\n<div style=\"margin-left: 2em\">\n<p>I'd love to hear your ideas or suggestions in the comment\nsection!</p>\n<p>Happy Wrapping!</p>\n</div>\n</li>\n</ul>",
    "timestamp": 1270706400000,
    "slug": "element-wrappers-in-javascript",
    "nid": 55
}