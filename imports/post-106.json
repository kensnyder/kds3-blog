{
    "comments": [],
    "tags": ["php", "web-dev"],
    "title": "Creating an API Endpoint in WordPress",
    "html": "<p>It turns out that creating an endpiont for an API in WordPress\nis super easy. Use cases for such a plugin include:</p>\n<ul>\n<li>Add new posts from an external application</li>\n<li>Request data from WordPress such as a feed of latest posts</li>\n</ul>\n<div class=\"geshifilter\">\n<pre class=\"php geshifilter-php\">\n<span class=\"kw2\">&lt;?php</span>\n \nadd_action<span class=\"br0\">(</span> <span class=\"st_h\">'parse_request'</span><span class=\"sy0\">,</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw2\">global</span> <span class=\"re0\">$wp</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$wp</span><span class=\"sy0\">-></span><span class=\"me1\">query_vars</span><span class=\"br0\">[</span><span class=\"st_h\">'pagename'</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st_h\">'my/endpoint'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">require_once</span><span class=\"br0\">(</span> __DIR__ <span class=\"sy0\">.</span> <span class=\"st_h\">'/my/endpoint.php'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>  \n<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>\n</pre></div>\n<p>I've tested it in version 3.7. The parse request hook was added\nin WordPress 2.0 so theoretically it should work back to version\n2.0.</p>\n<p>If you have several endpoints, you may want to test <span class=\"geshifilter\"><code class=\"text geshifilter-text\">$wp->query_vars['pagename']</code></span>\nwith a regex or against an array of endpoints.</p>\n<p>Be sure to make your endpoints secure. The plugin I created has\na table of known API logins and password. The connection is\ninitiated on the WordPress side on the plugin's settings page and\nan API login and password is stored in the table to authenticate\nincoming requests.</p>",
    "timestamp": 1384066800000,
    "slug": "creating-an-api-endpoint-in-wordpress",
    "nid": 106
}