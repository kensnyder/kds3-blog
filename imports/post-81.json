{
    "comments": [],
    "tags": ["javascript", "prototype-js"],
    "title": "Extending Host Objects: Evil; Extending Native Objects: Not\nEvil But Risky",
    "html": "<p>Kangax has a <a href=\"http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/\" target=\"_blank\">good article</a> on extending JavaScript native\nobjects and host objects. He begins by clarifying that extending\nhost objects (e.g. Element) is truly evil. Host objects do not have\nstrong specs and have no rules and extending them risks collisions.\nKangax has <a href=\"http://perfectionkills.com/whats-wrong-with-extending-the-dom/\" target=\"_blank\">an older post</a> talking about extending objects.\nThere he says that Prototype JS's biggest mistake was extending\nElement. I find that particularly interesting since Kangax was an\ninfluential voice in the Prototype JS community.</p>\n<p>I completely agree; problems with Element was one of the top\nreasons I stopped using Prototype JS. When Chrome 1.0 came out, for\nexample, it was apparent that extending Element was far from future\nproof, because, for one, Chrome 1.0 sometimes created elements that\ndidn't inherit from Element.</p>\n<p>So back to my first point: the difference between native objects\nand host objects. Extending native objects such as Array is not\nnecessarily evil. Shimming methods on native objects is OK if you\ncarefully follow spec. But that means adding your own methods to\nArray.prototype is bad. Prototype JS's Array.prototype.map function\nis a great example: it was created before the spec for\nArray.prototype.map was created. Now that Array.prototype.map has\nbeen implemented in most browsers, Prototype JS is overriding the\nproper version with its own version. That is damaging.</p>\n<p>But yes, shims are OK. Technically. It is OK to define JSON or\nArray.prototype.indexOf for browsers that lack them as long as you\nfollow spec. Just remember that following spec is hard. It is so\nhard in fact, that you probably shouldn't use shims.</p>\n<p>It's best in principal and practice to avoid extending objects\nyou don't own. In the special case of using shims, extending native\nobjects is OK as long as you use well-researched, well-tested\nshims. In practice it's very hard to find good implementations, so\nit is safest to avoid extending object natives altogether.</p>\n<p><strong>I recommend just staying away from altering prototypes\nof all objects you don't own and leave it at that.</strong></p>",
    "timestamp": 1312783200000,
    "slug": "extending-host-objects-evil-extending-native-objects-not-evil-but-risky",
    "nid": 81
}