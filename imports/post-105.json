{
    "comments": [],
    "tags": ["html", "javascript", "web-dev"],
    "title": "Reminiscing about the history of the <script> tag\nritual",
    "html": "<p>When JavaScript was first introduced, browsers treated the\ncontents of script tags as regular content. To be Netscape 1.0\ncompatible, you had to add HTML comments. Even though the comments\nbecame unnecessary in the mid 1990s, they are STILL used in many\nplaces around the web today.</p>\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script language<span class=\"sy0\">=</span><span class=\"st0\">\"javascript\"</span><span class=\"sy0\">></span>\n<span class=\"sy0\">&lt;!--</span>\n \n<span class=\"co1\">//--></span>\n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\n<p>Then along came XHTML. Script tag content could contain entities\nsuch as ampersands. Although browsers in HTML mode parsed the\ncontent fine, it was not valid XML. So add a CDATA declaration, and\nyou can put any content inside the script tag.</p>\n<p>XHTML was seen as the future of the web. It was theoretically\nfaster because browsers could be sure there were no HTML errors\nbefore parsing.</p>\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"text/javascript\"</span><span class=\"sy0\">></span>\n<span class=\"co1\">// &lt;![CDATA[</span>\n \n<span class=\"co1\">// ]]></span>\n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\n<p>In the mid 2000s there was a strange push for uber compatibility\nand HTML standards guru Ian Hickson proposed an <a target=\"_blank\" href=\"\">extremely ambitious approach that combined HTML comments\nwith XML comments.</a></p>\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"text/javascript\"</span><span class=\"sy0\">></span>\n<span class=\"sy0\">&lt;!--</span><span class=\"co1\">//-->&lt;![CDATA[//>&lt;!--</span>\n \n<span class=\"co1\">//-->&lt;!]]></span>\n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\n<p>In the late 2000s people started to realize that using XHTML\nwasn't really that helpful and that comments weren't necessary. The\ntype attribute had been optional since the mid 1990s and people\nstarted to drop it. So you were left with a bare script tag. How\nliberating!</p>\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script<span class=\"sy0\">></span>\n \n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\nIn 2010 it became the best practice to use <a target=\"_blank\" href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">\nImmediately-Invoked Function Expressions (IIFE)</a> as coined by\n\"Cowboy\" Ben Alman. Basically you wrap the body of your JavaScript\nin an anonymous function that is immediately executed. It took two\nmore lines but was less likely to cause conflicts.\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script<span class=\"sy0\">></span>\n    <span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\nAnd finally we have the way of 2013. In addition to IIFE, we can\nadd the string <span class=\"geshifilter\"><code class=\"text geshifilter-text\">\"use strict\";</code></span> to the function\nbody and the code would be error-checked. At development time,\npotential errors were easy to pinpoint. Older browsers see\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">\"use\nstrict\";</code></span> as a string literal that is never used; it\nhas no effect. For other browsers, it triggers a mode that will\nthrow errors for such things as missing <span class=\"geshifilter\"><code class=\"text geshifilter-text\">var</code></span>\nkeywords.\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"sy0\">&lt;</span>script<span class=\"sy0\">></span>\n    <span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"use strict\"</span><span class=\"sy0\">;</span>\n \n    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">></span>\n</pre></div>\n<hr/>\n<p>What next?</p>\n<ul>\n<li>There are also <span class=\"geshifilter\"><code class=\"text geshifilter-text\">defer</code></span> and <span class=\"geshifilter\"><code class=\"text geshifilter-text\">async</code></span> attributes that can be\n<a target=\"_blank\" href=\"http://peter.sh/experiments/asynchronous-and-deferred-javascript-execution-explained/\">\nvery useful</a>.</li>\n<li>You might start seeing <span class=\"geshifilter\"><code class=\"text geshifilter-text\">\"use asm\";</code></span> in addition to\n<span class=\"geshifilter\"><code class=\"text geshifilter-text\">\"use\nstrict\";</code></span>. <a target=\"_blank\" href=\"http://www.2ality.com/2013/02/asm-js.html\">asm</a> will help speed\nup execution and will be especially useful to libraries that do\nlow-level processing such as processing video feeds. It is backward\ncompaitble with older JavaScript; it mostly consists of adding +,\n||, and other symbols to tell the compiler how to optimize.</li>\n<li>You may see the <span class=\"geshifilter\"><code class=\"text geshifilter-text\">language</code></span> attribute come back\nto support native use of languages like <a target=\"_blank\" href=\"http://coffeescript.org/\">Coffescript</a> and <a target=\"_blank\" href=\"http://www.typescriptlang.org/\">TypeScript</a>.</li>\n</ul>\n<p>And who knows what will come up next.</p>",
    "timestamp": 1361516400000,
    "slug": "reminiscing-about-the-history-of-the-script-tag-ritual",
    "nid": 105
}