{
    "comments": [],
    "tags": ["css", "html", "javascript", "jquery"],
    "title": "Browser Rendering - Getting Computed Style is Hard",
    "html": "<p>Recently I was looking into how libraries like jQuery get the\ncompute style of an element. I found that in its simplest form,\ngetting computed style is one step:</p>\n<div class=\"geshifilter\">\n<pre class=\"javascript geshifilter-javascript\">\n<span class=\"kw2\">function</span> getStyle<span class=\"br0\">(</span>el<span class=\"sy0\">,</span> prop<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> el.<span class=\"me1\">currentStyle</span> <span class=\"sy0\">?</span>\n                el.<span class=\"me1\">currentStyle</span><span class=\"br0\">[</span>prop<span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"co1\">// IE</span>\n                document.<span class=\"me1\">defaultView</span>.<span class=\"me1\">getComputedStyle</span><span class=\"br0\">(</span>el<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span>prop<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre></div>\n<p>IE stores computed properties on the element's `currentStyle`\nand the other browsers use the method\n`document.defaultView.getComputedStyle`. But there are two things\nthat make a robust implementation difficult: (1) shorthand\nproperties don't work and (2) each browser returns different\nvalues. What I mean by shorthand properties are things like border\nwhich is made up of border-top-width, border-top-style,\nborder-top-color, border-right-width, border-right-style,\nborder-right-color, etc. Calling `getStyle(el, 'border')` returns\nundefined; you have to call 'borderTopWidth', 'borderTopStyle', and\n'borderTopColor' and the other 9 properties for the other 3 sides.\nThis is understandable but may not be intuitive when the css\ndeclares the border shorthand property.</p>\n<p>And then each browser returns different things. Here are some\nobservations of Firefox 5, Webkit (Chrome 13 and Safari 5.1), and\nIE8 based on my handful of tests on Windows 7.</p>\n<ul>\n<li>If given units in em, Webkit and Firefox convert to px, but IE8\nwill leave as em. So an implementation that computes the width of a\n30em-wide element, for example, will have to convert em to px for\nIE8. Note also that Firefox will return fractions of px for any\nproperty.</li>\n<li>When given a color by name or by hex notation, Webkit and\nFirefox both convert to rgb while IE8 will keep the given value. So\na robust implementation must be able to convert \"yellow\" to\n\"rbg(255,255,0)\", for example.</li>\n<li>When using the default font, Firefox returns \"serif\", Webkit\nreturns \"'Times New Roman'\" with the apostrophes and IE8 returns\n\"Times New Roman\" without quotes.</li>\n<li>Firefox calculated a font size of 0.9em to be 14.4px, Webkit\n14px, and IE8 keeps 0.9em. jQuery returns 14px in all cases with\nits `css` method.</li>\n<li>All browsers normalize a mixed-case values like `DOTted` to the\nlowercase `dotted`.</li>\n</ul>\n<p>One rendering difference too with a thick dotted border. IE8\nrenders the dots as circles and spaces them evenly so that there\nwill be no partial circles. Firefox also renders dots as circles\nbut keeps them a fixed distance apart so that the corners usually\nhave artifacts. Webkit renders the dots as squares and, like\nfirefox, overlaps dots in the corners. IE8 renders the background\ncolor behind the border and the other browsers do not.</p>\n<p>The following CSS renders like the picture below with Firefox 5\non the left, Chrome 13 in the center and IE8 on the right.</p>\n<div class=\"geshifilter\">\n<pre class=\"css geshifilter-css\">\n<span class=\"re0\">#subject</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">width</span><span class=\"sy0\">:</span> <span class=\"re3\">16em</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">height</span><span class=\"sy0\">:</span> <span class=\"re3\">17.75em</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">border</span><span class=\"sy0\">:</span> <span class=\"re3\">1em</span> DOTted <span class=\"re0\">#ddd</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">background-color</span><span class=\"sy0\">:</span> YELlow<span class=\"sy0\">;</span>\n        <span class=\"kw1\">font-size</span><span class=\"sy0\">:</span> <span class=\"re3\">0.9em</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">line-height</span><span class=\"sy0\">:</span> <span class=\"re3\">135%</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre></div>\n<div class=\"large-image\"><img alt=\"Browser Comparisons\" width=\"855\" height=\"425\" src=\"/sites/all/themes/kds/img/posts/render-compare.png\"/></div>\n<p>Also see <a target=\"_blank\" href=\"http://jsfiddle.net/Mbc5f/1/\">my JsFiddle version</a> if you want\nto play around and maybe try other properties. It also shows the\nresults of jQuery's `css` method.</p>",
    "timestamp": 1313301600000,
    "slug": "browser-rendering-getting-computed-style-is-hard",
    "nid": 85
}