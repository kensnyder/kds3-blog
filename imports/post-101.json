{
    "comments": [],
    "tags": ["cakephp", "php", "web-dev"],
    "title": "Database Sessions with CakePHP 1.3 in 1 minute",
    "html": "<p>Enabling database sessions with CakePHP 1.3 is super easy. But\nfirst I want to cover a few reasons that I know of where you need\nsessions stored in the database: load-balanced environments and PHP\nfile-locking issues.</p>\n<p>In a load-balanced environment you have some options.</p>\n<ul>\n<li><b>Use a network file system.</b> By this I mean using a hard\ndisk that is accessible to all application servers. This is slow\nand not very failure tollerant.</li>\n<li><b>Set the load balancers to have affinity</b>. This means that\nonce an ip address starts a session with one server, traffic from\nthat ip address will always go to that same server. This doesn't\nwork for large organizations who use reverse proxies. Users behind\nreverse proxies may have a different ip address on each http\nrequest. The effect is that they get logged off\nintermittently.</li>\n<li><b>Use database sessions.</b>. Storing session data in a\ndatabase provides the application with a quick way to read and\nwrite to a central location.</li>\n</ul>\n<p>The problem I ran into is that sometimes the PHP session file\nwould get locked and never unlocked. This happened on Apache 2.2\nwith PHP 5.3 on CentOS 5 when the application aborted AJAX requests\nthat hadn't completed yet. From the user point of view it looked\nlike our application server was unresponsive. And of course the\ncomplaint was an unhelpful report that \"the server is down.\" I\ndon't know if it is a bug (or \"deficiency\") with CentOS, Apache, or\nPHP, but I could reproduce it with a few tries of aborting AJAX\nrequests.</p>\n<p>So I switched to database sessions in CakePHP 1.3. You can do it\nin less than a minute.</p>\n<p>First, create the sessions table:</p>\n<div class=\"geshifilter\">\n<pre class=\"sql geshifilter-sql\">\n<span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> <span class=\"st0\">`cake_sessions`</span> <span class=\"br0\">(</span>\n  <span class=\"st0\">`id`</span> varchar<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"kw1\">NOT</span> <span class=\"kw1\">NULL</span> <span class=\"kw1\">DEFAULT</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span>\n  <span class=\"st0\">`data`</span> mediumtext<span class=\"sy0\">,</span>\n  <span class=\"st0\">`expires`</span> int<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">DEFAULT</span> <span class=\"kw1\">NULL</span><span class=\"sy0\">,</span>\n  <span class=\"kw1\">PRIMARY</span> <span class=\"kw1\">KEY</span> <span class=\"br0\">(</span><span class=\"st0\">`id`</span><span class=\"br0\">)</span>\n<span class=\"br0\">)</span> ENGINE<span class=\"sy0\">=</span>InnoDB <span class=\"kw1\">DEFAULT</span> CHARSET<span class=\"sy0\">=</span>utf8;\n</pre></div>\n<p>If you create the sessions table from the cake command line\nutility it will cause two problems with the `data` column: cake\nwill use a latin1 charset instead of utf8 and `data` will be text\ninstead of mediumtext. The text column type maxes out at 64kb\ncharacters while mediumtext can hold up to 16MB. It is quite\nreasonable that sometimes you will have more than 64kb in a user's\nsession!</p>\n<p>Second, alter three settings in <span class=\"geshifilter\"><code class=\"text geshifilter-text\">/app/config/core.php</code></span>:</p>\n<div class=\"geshifilter\">\n<pre class=\"php geshifilter-php\">\nConfigure<span class=\"sy0\">::</span><span class=\"me2\">write</span><span class=\"br0\">(</span><span class=\"st_h\">'Session.save'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'database'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// change from 'php' to 'database'</span>\n<span class=\"co1\">// ...</span>\nConfigure<span class=\"sy0\">::</span><span class=\"me2\">write</span><span class=\"br0\">(</span><span class=\"st_h\">'Session.model'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Session'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// you can just uncomment this line</span>\n<span class=\"co1\">// ...</span>\n<span class=\"co1\">// If you use $default in /app/config/database.php you can just uncomment the following line</span>\n<span class=\"co1\">// Otherwise, use whatever connection you use in /app/config/database.php</span>\n<span class=\"co1\">// This also allows you to put your sessions table in a completely different</span>\n<span class=\"co1\">//   database if you want</span>\nConfigure<span class=\"sy0\">::</span><span class=\"me2\">write</span><span class=\"br0\">(</span><span class=\"st_h\">'Session.database'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'default'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"co1\">// also, because of the way Configure works, you can optionally put these settings</span>\n<span class=\"co1\">// in your bootstrap or other file so you don't have to touch /app/config/core.php</span>\n</pre></div>\n<p>Last, test it. The effect will be that users currently on the\nsite will lose their session and log out. So you may want to make\nthe switch off hours.</p>\n<p>Happy sessioning!</p>",
    "timestamp": 1335247200000,
    "slug": "database-sessions-with-cakephp-1-3-in-1-minute",
    "nid": 101
}